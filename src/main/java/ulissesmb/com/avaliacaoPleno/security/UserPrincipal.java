package ulissesmb.com.avaliacaoPleno.security;import com.fasterxml.jackson.annotation.JsonIgnore;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.AuthorityUtils;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import ulissesmb.com.avaliacaoPleno.domain.modelo.Usuario;import java.util.Collection;import java.util.List;import java.util.Objects;import java.util.stream.Collectors;public class UserPrincipal implements UserDetails {    private Long id;    private String nome;    private String login;    @JsonIgnore    private String senha;    private Collection<? extends GrantedAuthority> authorities;    public UserPrincipal(Long id, String nome, String login, String senha, Collection<? extends GrantedAuthority> authorities) {        this.id = id;        this.nome = nome;        this.login = login;        this.senha = senha;        this.authorities = authorities;    }    public static UserPrincipal create(Usuario user) {        List<GrantedAuthority> authorities = null;        if(user.getRoles().size() == 0){            authorities = AuthorityUtils.createAuthorityList("ROLE_USER");        }else{            authorities = user.getRoles().stream().map(role ->                    new SimpleGrantedAuthority(role.getName().name())            ).collect(Collectors.toList());        }        return new UserPrincipal(                user.getId(),                user.getName(),                user.getLogin(),                user.getSenha(),                authorities        );    }    public Long getId() {        return id;    }    public String getNome() {        return nome;    }    public String getLogin() {        return login;    }    public String getSenha() {        return senha;    }    @Override    public String getUsername() {        return login;    }    @Override    public String getPassword() {        return senha;    }    @Override    public Collection<? extends GrantedAuthority> getAuthorities() {        return authorities;    }    @Override    public boolean isAccountNonExpired() {        return true;    }    @Override    public boolean isAccountNonLocked() {        return true;    }    @Override    public boolean isCredentialsNonExpired() {        return true;    }    @Override    public boolean isEnabled() {        return true;    }    @Override    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        UserPrincipal that = (UserPrincipal) o;        return Objects.equals(id, that.id);    }    @Override    public int hashCode() {        return Objects.hash(id);    }}