package ulissesmb.com.avaliacaoPleno.endpoint;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import ulissesmb.com.avaliacaoPleno.domain.modelo.FoneContato;import ulissesmb.com.avaliacaoPleno.error.CustomErrorResponse;import ulissesmb.com.avaliacaoPleno.reposity.IClienteRepository;import ulissesmb.com.avaliacaoPleno.reposity.IFoneContatosRepository;import ulissesmb.com.avaliacaoPleno.service.ClienteService;import ulissesmb.com.avaliacaoPleno.service.FoneContatoService;import java.util.List;@RestController@RequestMapping("api/telefones")public class FoneContatoEndPoint {    @Autowired    private FoneContatoService foneContatoService;    @Autowired    private IClienteRepository clienteRepository;    @Autowired    private IFoneContatosRepository foneContatosRepository;    @GetMapping(path = "/{id}")    public ResponseEntity<?> getClienteById(@PathVariable Long id) {        List<FoneContato> foneContatos = foneContatoService.buscarContatoPorCliente(id);        if(foneContatos.size() > 0)            return new ResponseEntity<>(foneContatos, HttpStatus.OK);        return new ResponseEntity<>(new CustomErrorResponse("Contatos não encontrados") ,HttpStatus.NOT_FOUND);    }    @PostMapping("/{idCliente}")    public ResponseEntity<?> save(@PathVariable (value = "idCliente")  Long idCliente,                                  @RequestBody FoneContato foneContato) {        return new ResponseEntity<>(clienteRepository.findById(idCliente).map(cliente ->{            foneContato.setCliente(cliente);            return foneContatoService.save(foneContato);        }).get(), HttpStatus.OK) ;    }    @DeleteMapping(path = "/{id}")    public ResponseEntity<?> delete(@PathVariable Long id) {        foneContatoService.delete(id);        return new ResponseEntity<>(HttpStatus.OK);    }    @PutMapping("/{idCliente}/telefone/{idTelefone}")    public ResponseEntity<?> update(@PathVariable (value = "idCliente")  Long idCliente,                                    @PathVariable (value = "idTelefone")  Long idTelefone,                                    @RequestBody FoneContato object) {        if(!clienteRepository.existsById(idCliente)){            return new ResponseEntity<>(new CustomErrorResponse("Cliente não encontrado") ,HttpStatus.NOT_FOUND);        }        return new ResponseEntity<>(foneContatosRepository.findById(idTelefone).map( telefone ->{            telefone.setNumero(object.getNumero());            telefone.setTipoContato(object.getTipoContato());            return foneContatosRepository.save(telefone);        }).get(), HttpStatus.OK) ;    }}