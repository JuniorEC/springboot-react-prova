package ulissesmb.com.avaliacaoPleno.endpoint;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import ulissesmb.com.avaliacaoPleno.domain.modelo.EmailContato;import ulissesmb.com.avaliacaoPleno.error.CustomErrorResponse;import ulissesmb.com.avaliacaoPleno.reposity.IClienteRepository;import ulissesmb.com.avaliacaoPleno.reposity.IEmailRepository;import ulissesmb.com.avaliacaoPleno.security.CurrentUser;import ulissesmb.com.avaliacaoPleno.security.UserPrincipal;import java.util.ArrayList;import java.util.List;@RestController@RequestMapping("api/emails")public class EmailEndPoint {    @Autowired    private IClienteRepository clienteRepository;    @Autowired    private IEmailRepository emailRepository;    @GetMapping(path = "/{id}")    public ResponseEntity<?> getClienteById(@CurrentUser UserPrincipal currentUser, @PathVariable Long id) {        List<EmailContato> emails = new ArrayList<>();        emailRepository.findByCliente(clienteRepository.findById(id).get()).forEach(emails::add);        return new ResponseEntity<>(emails, HttpStatus.OK);    }    @PostMapping("/{idCliente}")    public ResponseEntity<?> save(@CurrentUser UserPrincipal currentUser, @PathVariable(value = "idCliente") Long idCliente,                                  @RequestBody EmailContato foneContato) {        return new ResponseEntity<>(clienteRepository.findById(idCliente).map(cliente -> {            foneContato.setCliente(cliente);            return emailRepository.save(foneContato);        }).get(), HttpStatus.OK);    }    @DeleteMapping(path = "/{id}")    public ResponseEntity<?> delete(@CurrentUser UserPrincipal currentUser, @PathVariable Long id) {        emailRepository.deleteById(id);        return new ResponseEntity<>(HttpStatus.OK);    }    @PutMapping("/{idCliente}/email/{idEmail}")    public ResponseEntity<?> update(@CurrentUser UserPrincipal currentUser, @PathVariable(value = "idCliente") Long idCliente,                                    @PathVariable(value = "idEmail") Long idEmail,                                    @RequestBody EmailContato object) {        if (!clienteRepository.existsById(idCliente)) {            return new ResponseEntity<>(new CustomErrorResponse("Cliente n√£o encontrado"), HttpStatus.NOT_FOUND);        }        return new ResponseEntity<>(emailRepository.findById(idEmail).map(email -> {            email.setEmail(object.getEmail());            return emailRepository.save(email);        }).get(), HttpStatus.OK);    }}